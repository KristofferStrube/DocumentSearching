@page "/"
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration.Attributes
@using KristofferStrube.DocumentSearching.SuffixTree
@using System.Diagnostics
@inject HttpClient HttpClient

<PageTitle>DocumentSearching - Search</PageTitle>

<h1>Search</h1>
<p>
    Here you can search through all the elements in the periodic table using an in-memory search index.<br />
    @if(index is null)
    {
        <small>The index is currently being built (@indexingProgress / @(elements?.Length-1)).</small>
    }
    else
    {
        <small>Try seaching "Hydrogen".</small>
    }
</p>
@if (index is null)
{
    return;
}
<input @bind=query @bind:event="oninput" @bind:after=Search style="width:100%;" />
<br />
@if (searchTime is not null)
{
    <p>Found @matchingElements.Length @(matchingElements.Length is 1 ? "element" : "elements") in @($"{searchTime.Value:0.0}") ms.</p>
}

@foreach (Element element in matchingElements)
{
    <div @key=element>
        <h3>@element.Name</h3>
        <p>@element.Summary</p>
        <hr />
    </div>
}

@code {
    private double? searchTime;
    private Element[] elements = default!;
    private Element[] matchingElements = [];

    private DocumentIndex<Element>? index;
    private int indexingProgress = 0;

    private string query = "";

    protected override async Task OnInitializedAsync()
    {
        Stream periodicTableCsv = await HttpClient.GetStreamAsync("data/periodic-table-detailed.csv");
        using StreamReader streamReader = new StreamReader(periodicTableCsv);

        using var csv = new CsvReader(streamReader, CultureInfo.InvariantCulture);
        elements = csv.GetRecords<Element>().ToArray();

        SuffixTreeSearchIndex searchIndex = new();
        index = await DocumentIndex<Element>.CreateAsync(searchIndex, elements[..^2], async e =>
        {
            indexingProgress++;
            StateHasChanged();
            await Task.Delay(1);
            return e.Name.ToLower() + " " + e.Summary.ToLower();
        });
    }

    public async Task Search()
    {
        if (query is "" || index is null)
        {
            matchingElements = [];
            searchTime = null;
            return;
        }

        Stopwatch sw = Stopwatch.StartNew();
        matchingElements = index.ExactSearch(query.ToLower());
        searchTime = sw.ElapsedTicks / (double)1_000_000;
    }

    public class Element
    {
        [Name("name")]
        public required string Name { get; set; }
        [Name("summary")]
        public required string Summary { get; set; }
    }
}