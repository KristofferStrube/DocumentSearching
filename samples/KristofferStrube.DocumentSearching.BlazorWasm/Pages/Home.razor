@page "/"
@using System.Globalization
@using CsvHelper
@using CsvHelper.Configuration.Attributes
@using System.Diagnostics
@using System.Text.RegularExpressions
@inject HttpClient HttpClient

<PageTitle>DocumentSearching - Search</PageTitle>

<h1>Search</h1>
<p>
    Here you can search through all the elements in the periodic table using an in-memory search index.<br />
    <small>Try seaching "lightest chemical substance" to find Hydrogen.</small>
</p>
@if (index is null)
{
    return;
}
<input @bind=query @bind:event="oninput" @bind:after=Search style="width:100%;" />
<br />
@if (searchTime is not null && naive is not null)
{
    <p>Found @searchResults.Length @(searchResults.Length is 1 ? "element" : "elements") in @Math.Round(searchTime.Value, 2) ms compared to a simple IndexOf search in @Math.Round(naive.Value, 2) ms.</p>
}

@foreach (SearchResult<Element> result in searchResults)
{
    <div @key=result.Element>
        <hr />
        <h3>@result.Element.Name</h3>
        @for (int i = 0; i < result.Element.Summary.Length; i++)
        {
            if (result.Matches.FirstOrDefault(m => i == m.Position) is { } match && match.Length is not 0)
            {
                <span style="background-color:lightgreen;">@result.Element.Summary[i..(i + match.Length)]</span>
                i += match.Length - 1;
            }
            else
            {
                int nextMatch = result.Matches.FirstOrDefault(m => m.Position >= i).Position;
                if (nextMatch != 0)
                {
                    <span>@result.Element.Summary[i..(nextMatch)]</span>
                    i = nextMatch - 1;
                }
                else
                {
                    <span>@result.Element.Summary[i..]</span>
                    i = result.Element.Summary.Length;
                }
            }
        }
        <br />
        <small>Matched in @result.Matches.Length @(result.Matches.Length == 1 ? "place" : "places")</small>
    </div>
}

@code {
    private double? searchTime;
    private double? naive;
    private Element[] elements = default!;
    private SearchResult<Element>[] searchResults = [];

    private DocumentIndex<Element> index = default!;

    private string query = "";

    protected override async Task OnInitializedAsync()
    {
        Stream periodicTableCsv = await HttpClient.GetStreamAsync("data/periodic-table-detailed.csv");
        using StreamReader streamReader = new StreamReader(periodicTableCsv);

        using var csv = new CsvReader(streamReader, CultureInfo.InvariantCulture);
        elements = csv.GetRecords<Element>().ToArray();

        index = DocumentIndex<Element>.Create(elements, e => e.Summary.ToLower());
    }

    public void Search()
    {
        if (query is "")
        {
            searchResults = [];
            searchTime = null;
            return;
        }

        Stopwatch sw = Stopwatch.StartNew();
        searchResults = index.ExactSearch(query.ToLower());
        searchTime = sw.ElapsedTicks / (double)1_000_000;

        sw = Stopwatch.StartNew();
        foreach (string queryPart in query.Split(" ").Where(s => s.Trim().Length is not 0))
        {
            foreach (var element in elements)
            {
                NaiveStringSearch(element.Summary.ToLower(), queryPart.ToLower());
            }
        }
        naive = sw.ElapsedTicks / (double)1_000_000;
    }

    public static List<int> NaiveStringSearch(string str, string value)
    {
        if (String.IsNullOrEmpty(value))
            throw new ArgumentException("the string to find may not be empty", "value");
        List<int> indexes = new List<int>();
        for (int index = 0; ; index += value.Length)
        {
            index = str.IndexOf(value, index);
            if (index == -1)
                return indexes;
            indexes.Add(index);
        }
    }

    public class Element
    {
        [Name("name")]
        public required string Name { get; set; }
        [Name("summary")]
        public required string Summary { get; set; }
    }
}